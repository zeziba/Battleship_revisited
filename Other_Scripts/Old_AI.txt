        # move_set = []
        # for x, y in self.__delta_move:
        #     mag_moves = []
        #     for mag in range(1, magnitude):
        #         if ((x + mag), (y + mag)) in self._moves_left:
        #             mag_moves.append((x + mag, y + mag))
        #     print(len(mag_moves) + 1, magnitude)
        #     if magnitude == (len(mag_moves) + 1):
        #         print("IN")
        #         for item in mag_moves:
        #             move_set.append(item)
        # print(move_set)
        #
        # return move_set

        # all_moves = []
        # moves_possible = []
        #
        # for c_x, c_y in self.__delta_move:
        #     for mag in range(1, magnitude):
        #         if (coord[0] + (c_x * mag), coord[1] + (c_y * mag)) in self._moves_left:
        #             all_moves.append((coord[0] + (c_x * mag), coord[1] + (c_y * mag)))
        #     print(all_moves, "Len: %s, Mag: %s" % (len(all_moves), magnitude))
        #     if magnitude == len(all_moves) + 1:
        #         print("in")
        #         moves_possible.append(all_moves)
        #     all_moves = []
        # print(moves_possible)
        # return moves_possible

        # a = [possible_move for possible_move in
        #      [move for move in
        #       [
        #           [(coord[0] + (c_x * mag), coord[1] + (c_y * mag))
        #            for mag in range(1, magnitude)]
        #           for c_x, c_y in self.__delta_move] if move in self._moves_left]
        #      if magnitude == len(possible_move) + 1]
        # return a

        # return [(coord[0] + x + mag, coord[1] + y + mag) for x, y in self.__delta_move for mag in range(1, magnitude) if (coord[0] + x + mag, coord[1] + y + mag) in self._moves_left]


\\\\\\\\\\\\\\\
old function for adjust hits
\\\\\\\\\\\\\\\
        # all_moves = [sublist_5 for sublist_5 in self.__check_adj_tiles(
        #     [sublist_4 for sublist_4 in self.__check_adj_tiles(
        #         [sublist_3 for sublist_3 in self.__check_adj_tiles(
        #             [sublist_2 for sublist_2 in self.__check_adj_tiles(
        #                 [sublist for sublist in self.__check_adj_tiles(self._hit_map)
        #                  if sublist]) if sublist_2]) if sublist_3]) if sublist_4]) if sublist_5]
        # for cord in all_moves:
        #     self._point_map[cord] += 1

\\\\\\\\\\\\\\\\\\\\\\\\\\\
END
\\\\\\\\\\\\\\\\\\\\\\\\\\\

\\\\\\\\\\\\\\\\\\\\\\\\\\\
NOV 17 Trials Check Delta
\\\\\\\\\\\\\\\\\\\\\\\\\\\

        # hold2 = []
        # for delta in self.__delta_move:
        #     hold = []
        #     for move in _gen_move(delta, magnitude):
        #         hold.append(move)
        #     if len(hold) == magnitude-1:
        #         hold2.append(hold)

        # gen = [_add_tuples(coord, move) for delta in self.__delta_move for move in _gen_move(delta, magnitude)]
        # gen_moves = [debug_tuple(moves) for delta in self.__delta_move
        #              for moves in (((coord[0] + (delta[0] * mag)), (coord[1] + (delta[1] * mag)))
        #                            for mag in range(1, magnitude))]
        # print(gen_moves)
        # return gen_moves
        # to_move = [possible_move for possible_move in
        #            [move for move in
        #             [
        #                 [(coord[0] + (c_x * mag), coord[1] + (c_y * mag))
        #                  for mag in range(1, mag)]
        #                 for c_x, c_y in self.__delta_move] if coord in self._moves_left]
        #            if mag == len(possible_move) + 1]
        # movesa = [good_move for good_move in to_move if good_move in self._moves_left]
        # return movesa
        # gen_moves = [debug_tuple(moves) for delta in self.__delta_move for moves in [debug_tuple(move) for move in _gen_move(delta, magnitude)]]
        # return gen_moves

        # return [cords for cords in
        #         [
        #             [(coord[0] + (c_x * mag), coord[1] + (c_y * mag))
        #              for mag in range(1, magnitude) if (coord[0] + (c_x * mag), coord[1] + (c_y * mag)) in self._moves_left
        #             ] for c_x, c_y in self.__delta_move
        #         ] if magnitude == len(cords) + 1
        # ]
        def debug_tuple(tup):
            print(tup)
            return tup

        def _add_tuples(tup1, tup2):
            try:
                return (tup1[0] + tup2[0]), (tup1[1] + tup2[1])
            except Exception as e:
                print(e, "You failed to enter a 2 length tuple")

\\\\\\\\\\\\\\\\\\\\\\\\\\\
NOV 17 Trials END
\\\\\\\\\\\\\\\\\\\\\\\\\\\

\\\\\\\\\\\\\\\\\\\\\\\\\\\
NOV 17 Trials __valid_attack_move
\\\\\\\\\\\\\\\\\\\\\\\\\\\

        def _gen_move(delta_start, mag):
            mag -= 1
            while True:
                yield (delta_start[0] * mag, delta_start[1]) if abs(delta_start[0]) \
                    else (delta_start[0], delta_start[1] * mag)
                mag -= 1
                if not mag:
                    break

        # test = [cord for cord_item in [item for sublist in
        #         [self.__check_delta_moves(coord, ship_length+1) for ship_length in
        #          [self.fleet[ship].get_length() for ship in range(len(self.fleet)) if not self.fleet[ship]()]]
        #         for item in sublist] for cord in cord_item]
        #
        # for item in test:
        #     self._point_map[item] += 1
        # self._point_map[coord] += 1



\\\\\\\\\\\\\\\\\\\\\\\\\\\
NOV 17 Trials END
\\\\\\\\\\\\\\\\\\\\\\\\\\\

\\\\\\\\\\\\\\\\\\\\\\\\\\\
NOV 17 Trials __check_delta_moves
\\\\\\\\\\\\\\\\\\\\\\\\\\\

        # return self.__flatten([moves for moves in [[(coord[0] + move[0], coord[1] + move[1])
        #                                             for move in _gen_move(delta, magnitude)
        #                                             if (coord[0] + move[0], coord[1] + move[1]) in self._moves_left]
        #                                            for delta in self.__delta_move] if len(moves) == magnitude-1])

\\\\\\\\\\\\\\\\\\\\\\\\\\\
NOV 17 Trials END
\\\\\\\\\\\\\\\\\\\\\\\\\\\

\\\\\\\\\\\\\\\\\\\\\\\\\\\
NOV 17 Trials Point Map
\\\\\\\\\\\\\\\\\\\\\\\\\\\

        for number, file in enumerate(self._point_map_files):
            file_str = file
            match = re.search(r"(.*)_", file_str)
            print((match.group()[0:-1] + file[len(match.group()) -1:]))
            print(self.load_base_number, match.group()[0:-1])
            if str(self.load_base_number) == match.group()[0:-1]:
                self.point_maps[number] = self._load_point_map(file)
                self.point_maps[number + 1] = self._load_point_map((match.group()[:-1] + file[len(match.group()) - 1:]))

            point_map = self.data.point_maps[p_number][eval("self.player_%s_turn" % (self.player_number + 1))] \
                ['turn_%s' % str(eval("self.player_%s_turn" % (self.player_number + 1)))]
            print(self.data.point_maps[p_number][eval("self.player_%s_turn" % (self.player_number + 1))] \

\\\\\\\\\\\\\\\\\\\\\\\\\\\
NOV 17 Trials Point Map
\\\\\\\\\\\\\\\\\\\\\\\\\\\